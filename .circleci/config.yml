version: 2.1

executors:
  gcp-docker-executor:
    docker:
      - image: cimg/google-cloud:latest  # Official CircleCI image with both Docker and gcloud
    working_directory: ~/repo
    environment:
      CLOUDSDK_CORE_DISABLE_PROMPTS: 1
      DOCKER_BUILDKIT: 1  # Enable Docker BuildKit for faster builds

jobs:
  checkout_code:
    executor: gcp-docker-executor
    steps:
      - checkout

  build_docker_image:
    executor: gcp-docker-executor
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Authenticate with Google Cloud
          command: |
            echo "$GCLOUD_SERVICE_KEY" | base64 -d > gcp-key.json
            gcloud auth activate-service-account --key-file=gcp-key.json
            gcloud auth configure-docker us-central1-docker.pkg.dev

      - run:
          name: Build and Push Docker Image
          command: |
            # Build with cache and proper tagging
            docker build \
              -t us-central1-docker.pkg.dev/$GOOGLE_PROJECT_ID/llmops-repo/llmops-app:$CIRCLE_SHA1 \
              -t us-central1-docker.pkg.dev/$GOOGLE_PROJECT_ID/llmops-repo/llmops-app:latest \
              --build-arg BUILDKIT_INLINE_CACHE=1 \
              .
            
            # Push both tags
            docker push us-central1-docker.pkg.dev/$GOOGLE_PROJECT_ID/llmops-repo/llmops-app:$CIRCLE_SHA1
            docker push us-central1-docker.pkg.dev/$GOOGLE_PROJECT_ID/llmops-repo/llmops-app:latest

  deploy_to_gke:
    executor: gcp-docker-executor
    steps:
      - checkout
      - run:
          name: Set up Google Cloud Auth
          command: |
            echo "$GCLOUD_SERVICE_KEY" | base64 -d > gcp-key.json
            gcloud auth activate-service-account --key-file=gcp-key.json
      
      - run:
          name: Configure GKE Access
          command: |
            gcloud container clusters get-credentials $GKE_CLUSTER \
              --region $GOOGLE_COMPUTE_REGION \
              --project $GOOGLE_PROJECT_ID

      - run:
          name: Deploy to Kubernetes
          command: |
            # Verify cluster access
            kubectl cluster-info
            
            # Apply deployment
            kubectl apply -f kubernetes-deployment.yaml --validate=false
            
            # Restart deployment if it exists
            if kubectl get deployment celebmind-app; then
              kubectl rollout restart deployment celebmind-app
            fi

workflows:
  version: 2
  deploy_pipeline:
    jobs:
      - checkout_code
      - build_docker_image:
          requires:
            - checkout_code
          context: gcp-creds  # Reference your context with GCP credentials
      - deploy_to_gke:
          requires:
            - build_docker_image
          context: gcp-creds